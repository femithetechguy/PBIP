expression MaxDisbursement =
		let
		    Source = Excel.Workbook(File.Contents("D:\AnalyticsWithNaga\Projects\AccessHolding\Data_Source\Loans facts.xlsx"), null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"loan_snap_key", Int64.Type}, {"is_current", type logical}, {"start_date", type datetime}, {"end_date", type any}, {"entity_code", type text}, {"loan_key", Int64.Type}, {"business_dateid", Int64.Type}, {"loan_status_key", type text}, {"loan_substatus_key", type text}, {"currency_code", type text}, {"principal_amount", Int64.Type}, {"principal_amount_paid", type number}, {"principal_amount_outstanding", type number}, {"interest_amount_planned", type number}, {"interest_amount_paid", type number}, {"interest_amount_accrued", Int64.Type}, {"penalty_amount", type number}, {"penalty_amount_paid", type number}, {"penalty_amount_waived", type number}, {"charge_amount", type number}, {"charge_amount_paid", Int64.Type}, {"principal_amount_lccy", Int64.Type}, {"principal_amount_paid_lccy", type number}, {"principal_amount_outstanding_lccy", type number}, {"interest_amount_planned_lccy", type number}, {"interest_amount_paid_lccy", type number}, {"interest_amount_accrued_lccy", Int64.Type}, {"penalty_amount_lccy", type number}, {"penalty_amount_paid_lccy", type number}, {"penalty_amount_waived_lccy", type number}, {"charge_amount_lccy", type number}, {"charge_amount_paid_lccy", Int64.Type}, {"principal_amount_eur", type number}, {"principal_amount_paid_eur", type number}, {"principal_amount_outstanding_eur", type number}, {"interest_amount_planned_eur", type number}, {"interest_amount_paid_eur", type number}, {"interest_amount_accrued_eur", Int64.Type}, {"penalty_amount_eur", type number}, {"penalty_amount_paid_eur", type number}, {"penalty_amount_waived_eur", type number}, {"charge_amount_eur", type number}, {"charge_amount_paid_eur", type number}, {"overdue_days", Int64.Type}, {"overdue_days_max", Int64.Type}, {"finish_dateid", Int64.Type}, {"last_repayment_dateid", Int64.Type}, {"write_off_dateid", Int64.Type}, {"fx_date", type date}}),
		    #"Merged Queries" = Table.NestedJoin(#"Changed Type", {"loan_key"}, Dimension, {"loan_key"}, "Dimension", JoinKind.LeftOuter),
		    #"Expanded Dimension" = Table.ExpandTableColumn(#"Merged Queries", "Dimension", {"disbursment_dateid"}, {"Dimension.disbursment_dateid"}),
		    #"Renamed Columns" = Table.RenameColumns(#"Expanded Dimension",{{"Dimension.disbursment_dateid", "DisbursementDateId"}}),
		    #"Removed Columns1" = Table.RemoveColumns(#"Renamed Columns",{"loan_snap_key", "is_current", "start_date", "end_date", "loan_key", "business_dateid", "loan_status_key", "loan_substatus_key", "currency_code", "principal_amount", "principal_amount_paid", "principal_amount_outstanding", "interest_amount_planned", "interest_amount_paid", "interest_amount_accrued", "penalty_amount", "penalty_amount_paid", "penalty_amount_waived", "charge_amount", "charge_amount_paid", "principal_amount_lccy", "principal_amount_paid_lccy", "principal_amount_outstanding_lccy", "interest_amount_planned_lccy", "interest_amount_paid_lccy", "interest_amount_accrued_lccy", "penalty_amount_lccy", "penalty_amount_paid_lccy", "penalty_amount_waived_lccy", "charge_amount_lccy", "charge_amount_paid_lccy", "principal_amount_eur", "principal_amount_paid_eur", "principal_amount_outstanding_eur", "interest_amount_planned_eur", "interest_amount_paid_eur", "interest_amount_accrued_eur", "penalty_amount_eur", "penalty_amount_paid_eur", "penalty_amount_waived_eur", "charge_amount_eur", "charge_amount_paid_eur", "overdue_days", "overdue_days_max", "finish_dateid", "last_repayment_dateid", "write_off_dateid", "fx_date"}),
		    #"Grouped Rows" = Table.Group(#"Removed Columns1", {"entity_code"}, {{"Count", each List.Max([DisbursementDateId]), type nullable number}}),
		    #"Split Column by Positions" = Table.SplitColumn(Table.TransformColumnTypes(#"Grouped Rows", {{"Count", type text}}, "en-IN"), "Count", Splitter.SplitTextByPositions({0, 4, 6}), {"Count.1", "Count.2", "Count.3"}),
		    #"Merged Columns" = Table.CombineColumns(#"Split Column by Positions",{"Count.1", "Count.2", "Count.3"},Combiner.CombineTextByDelimiter("-", QuoteStyle.None),"Merged"),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Merged Columns",{{"Merged", type date}})
		in
		    #"Changed Type1"
	lineageTag: 485e7561-b2b4-483e-ba82-4c5db2ac9c5f

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

